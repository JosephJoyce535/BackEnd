let react,htm,superagent,AsyncPage,FourOhFour,Header,myFunction;_183‍.x([["Author",()=>Author]]);_183‍.w("react",[["default",["react"],function(v){react=v}]]);_183‍.w("htm",[["default",["htm"],function(v){htm=v}]]);_183‍.w("superagent",[["default",["superagent"],function(v){superagent=v}]]);_183‍.w("./AsyncPage.js",[["AsyncPage",["AsyncPage"],function(v){AsyncPage=v}]]);_183‍.w("./FourOhFour.js",[["FourOhFour",["FourOhFour"],function(v){FourOhFour=v}]]);_183‍.w("../Header.js",[["Header",["Header"],function(v){Header=v}]]);_183‍.w("../../../server.mjs",[["myFunction",["myFunction"],function(v){myFunction=v}]]);








const html = _183‍.a("htm",htm).bind(_183‍.a("react",react).createElement)


       class Author extends _183‍.a("AsyncPage",AsyncPage) {
  static async preloadAsyncData (props) {
    const { body } = await _183‍.a("superagent",superagent).get(`http://localhost:3001/api/author/${props.match.params.authorId}`)
    return { author: body }
  }

  render () {
    if (this.state.loading) {
      return html`<div>
        <${Header}/>
        <div>Loading ...</div>
      </div>`
    }

    if (!this.state.author) {
      return html`<${FourOhFour}
        staticContext=${this.props.staticContext}
        error="Author not found"
      />`
    }

    return html`<div>
      <${Header}/>
      <h2>${this.state.author.name}</h2>
      <p>${this.state.author.bio}</p>
      <h3>Books</h3>
      <ul>
        ${this.state.author.books.map((book) =>
          html`<li key=${book.id}>${book.title} (${book.year})</li>`
        )}
      </ul>
      <button onClick=${() => myFunction()}>Click Me!</button>
    </div>`
  }

};_183‍.j(["Author"]);

